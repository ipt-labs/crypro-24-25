from rsa import *

def print_section(title: str):
    print(f"\n{'='*60}")
    print(f"{title}")
    print(f"{'='*60}\n")

def format_key_info(name: str, public_key: RSAPublicKey, private_key: RSAPrivateKey) -> str:
    return f"""
–ö–ª—é—á—ñ –¥–ª—è {name}:
---------------
–í—ñ–¥–∫—Ä–∏—Ç–∏–π –∫–ª—é—á (e, n):
  e = {public_key.e}
  n = {public_key.n}
  –î–æ–≤–∂–∏–Ω–∞ –∫–ª—é—á–∞: {public_key.n.bit_length()} –±—ñ—Ç
–ó–∞–∫—Ä–∏—Ç–∏–π –∫–ª—é—á:
  d = {private_key.d}
  p = {private_key.p}
  q = {private_key.q}
–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞:
  e‚ãÖd mod œÜ(n) = {(public_key.e * private_key.d) % ((private_key.p - 1) * (private_key.q - 1))} (–º–∞—î –±—É—Ç–∏ 1)
"""

def demonstrate_key_generation(alice_bit_length, bob_bit_length):
    print_section("–ì–ï–ù–ï–†–ê–¶–Ü–Ø –ö–õ–Æ–ß–Ü–í RSA")

    # –∫–ª—é—á—ñ –¥–ª—è –∞–ª—ñ—Å–∏
    print(f"1. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª—é—á—ñ–≤ –¥–ª—è –ê–ª—ñ—Å–∏ ({alice_bit_length} –±—ñ—Ç)...")
    alice_public, alice_private = generate_key_pair(alice_bit_length)
    print(format_key_info("–ê–ª—ñ—Å–∏", alice_public, alice_private))

    # –∫–ª—é—á—ñ –¥–ª—è –±–æ–±–∞
    print(f"\n2. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª—é—á—ñ–≤ –¥–ª—è –ë–æ–±–∞ ({bob_bit_length} –±—ñ—Ç)...")
    bob_public, bob_private = generate_key_pair(bob_bit_length)
    print(format_key_info("–ë–æ–±–∞", bob_public, bob_private))

    return (alice_public, alice_private), (bob_public, bob_private)

def demonstrate_encryption(alice_keys: Tuple[RSAPublicKey, RSAPrivateKey], bob_keys: Tuple[RSAPublicKey, RSAPrivateKey]):
    print_section("–®–ò–§–†–£–í–ê–ù–ù–Ø –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨")

    alice_public, alice_private = alice_keys
    bob_public, bob_private = bob_keys

    test_messages = [
        (12345, "–ü—Ä–æ—Å—Ç–µ —á–∏—Å–ª–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"),
        (98765432198765432198765432198765432198765432198765432198765432198765432198765432198765432198765432198765432198765432198765432176543219876543219876543217654321987654321987654321,
          "–í–µ–ª–∏–∫–µ —á–∏—Å–ª–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"),
        ("–ü—Ä–∏–≤—ñ—Ç, RSA! üîí", "–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –∑ –µ–º–æ–¥–∑—ñ"),
        ("–¶–µ —Å–µ–∫—Ä–µ—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –ë–æ–±–∞ –¥–æ –ê–ª—ñ—Å–∏", "–î–æ–≤–≥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∏—Ä–∏–ª–∏—Ü–µ—é"),
        ("Test message with special chars: @#$%^&*()", "–¢–µ—Å—Ç —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤")
    ]

    for i, (message, description) in enumerate(test_messages, 1):
        print(f"\n–¢–µ—Å—Ç {i}.1 - –ë–æ–± –Ω–∞–¥—Å–∏–ª–∞—î –ê–ª—ñ—Å—ñ:")
        print(f"–û–ø–∏—Å: {description}")
        print(f"–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message}")

        # –±–æ–± —à–∏—Ñ—Ä—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–ª—ñ—Å–∏
        print("\n–ë–æ–± —à–∏—Ñ—Ä—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ê–ª—ñ—Å–∏:")
        encrypted_blocks, is_text, orig_len = encrypt(message, alice_public)
        if is_text:
            print(f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ñ –±–ª–æ–∫–∏: {encrypted_blocks}")
        else:
            print(f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ñ –±–ª–æ–∫–∏ —á–∏—Å–ª–∞: {encrypted_blocks}")

        # –∞–ª—ñ—Å–∞ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ–±–∞
        print("\n–ê–ª—ñ—Å–∞ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
        decrypted = decrypt(encrypted_blocks, alice_private, is_text, orig_len)
        print(f"–†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {decrypted}")
        print(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É—Å–ø—ñ—à–Ω–∞: {message == decrypted}")

        # –∞–ª—ñ—Å–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –±–æ–±—É
        reply_message = message * 2 if isinstance(message, int) else f"Re: {message[:20]}... –û—Ç—Ä–∏–º–∞–Ω–æ!"
        print(f"\n–¢–µ—Å—Ç {i}.2 - –ê–ª—ñ—Å–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ë–æ–±—É:")
        print(f"–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {reply_message}")

        # –∞–ª—ñ—Å–∞ —à–∏—Ñ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –±–æ–±–∞
        print("\n–ê–ª—ñ—Å–∞ —à–∏—Ñ—Ä—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ë–æ–±–∞:")
        encrypted_reply, reply_is_text, reply_len = encrypt(reply_message, bob_public)
        if reply_is_text:
            print(f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ñ –±–ª–æ–∫–∏: {encrypted_reply}")
        else:
            print(f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ —á–∏—Å–ª–æ: {encrypted_reply[0]}")

        # –±–æ–± —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–ª—ñ—Å–∏
        print("\n–ë–æ–± —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
        decrypted_reply = decrypt(encrypted_reply, bob_private, reply_is_text, reply_len)
        print(f"–†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {decrypted_reply}")
        print(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É—Å–ø—ñ—à–Ω–∞: {reply_message == decrypted_reply}")

        print("\n" + "="*50)

def demonstrate_signature(alice_keys: Tuple[RSAPublicKey, RSAPrivateKey], bob_keys: Tuple[RSAPublicKey, RSAPrivateKey]):
    print_section("–î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –¶–ò–§–†–û–í–ò–• –ü–Ü–î–ü–ò–°–Ü–í")

    alice_public, alice_private = alice_keys
    bob_public, bob_private = bob_keys

    test_messages = [
        (12345, "–ü—Ä–æ—Å—Ç–µ —á–∏—Å–ª–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"),
        (987654321, "–í–µ–ª–∏–∫–µ —á–∏—Å–ª–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"),
        ("–¶–µ–π –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞—Å–≤—ñ–¥—á—É—î —Å–ø—Ä–∞–≤–∂–Ω—ñ—Å—Ç—å –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –ø—ñ–¥–ø–∏—Å—É", "–¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    ]

    for i, (message, description) in enumerate(test_messages, 1):
        print(f"\n–¢–µ—Å—Ç {i}.1 - –ü—ñ–¥–ø–∏—Å –≤—ñ–¥ –ê–ª—ñ—Å–∏:")
        print(f"–û–ø–∏—Å: {description}")
        print(f"–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message}")

        # —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å—É –∞–ª—ñ—Å–æ—é
        print("\n–ê–ª—ñ—Å–∞ —Å—Ç–≤–æ—Ä—é—î —Ü–∏—Ñ—Ä–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å:")
        alice_signature = sign(message, alice_private)
        print(f"–ü—ñ–¥–ø–∏—Å: {alice_signature}")

        # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É –±–æ–±–æ–º
        print("\n–ë–æ–± –ø–µ—Ä–µ–≤—ñ—Ä—è—î –ø—ñ–¥–ø–∏—Å –ê–ª—ñ—Å–∏:")
        is_valid = verify(message, alice_signature, alice_public)
        print(f"–ü—ñ–¥–ø–∏—Å –≤–∞–ª—ñ–¥–Ω–∏–π: {is_valid}")

        # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—ñ–¥—Ä–æ–±–∫—É
        print("\n–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏—è–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ä–æ–±–∫–∏:")
        if isinstance(message, str):
            fake_message = message + " –ü–Ü–î–†–û–ë–õ–ï–ù–û"
        else:
            fake_message = message + 1
        print(f"–ó–º—ñ–Ω–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {fake_message}")

        is_valid = verify(fake_message, alice_signature, alice_public)
        print(f"–ü—ñ–¥–ø–∏—Å –¥–ª—è –∑–º—ñ–Ω–µ–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∞–ª—ñ–¥–Ω–∏–π: {is_valid}")

        # –±–æ–± –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î
        reply_message = message * 2 if isinstance(message, int) else f"–û—Ç—Ä–∏–º–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message}..."
        print(f"\n–¢–µ—Å—Ç {i}.2 - –ë–æ–± –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:")
        print(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {reply_message}")

        # —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å—É –±–æ–±–æ–º
        print("\n–ë–æ–± —Å—Ç–≤–æ—Ä—é—î —Ü–∏—Ñ—Ä–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å:")
        bob_signature = sign(reply_message, bob_private)
        print(f"–ü—ñ–¥–ø–∏—Å –ë–æ–±–∞: {bob_signature}")

        # –∞–ª—ñ—Å–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –ø—ñ–¥–ø–∏—Å –±–æ–±–∞
        print("\n–ê–ª—ñ—Å–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –ø—ñ–¥–ø–∏—Å –ë–æ–±–∞:")
        is_valid = verify(reply_message, bob_signature, bob_public)
        print(f"–ü—ñ–¥–ø–∏—Å –≤–∞–ª—ñ–¥–Ω–∏–π: {is_valid}")

        print("\n" + "="*50)

def demonstrate_key_exchange(alice_keys: Tuple[RSAPublicKey, RSAPrivateKey], bob_keys: Tuple[RSAPublicKey, RSAPrivateKey]):
    print_section("–ü–†–û–¢–û–ö–û–õ –û–ë–ú–Ü–ù–£ –ö–õ–Æ–ß–ê–ú–ò")

    alice_public, alice_private = alice_keys
    bob_public, bob_private = bob_keys

    # –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
    if alice_private.n >= bob_public.n:
        print("\n–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –î–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—ó –±–µ–∑–ø–µ–∫–∏ –º–æ–¥—É–ª—å –ê–ª—ñ—Å–∏ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –º–µ–Ω—à–∏–π –∑–∞ –º–æ–¥—É–ª—å –ë–æ–±–∞")
        print("–ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é...\n")

    # –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    secret_key = 12345
    if secret_key >= alice_private.n:
        raise ValueError(f"–ö–ª—é—á k={secret_key} –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π –¥–ª—è –¥–∞–Ω–æ—ó –∫—Ä–∏–ø—Ç–æ—Å–∏—Å—Ç–µ–º–∏")

    print(f"1. –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ:")
    print(f"   –°–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á k = {secret_key}")
    print(f"   –í—ñ–¥–∫—Ä–∏—Ç–∏–π –∫–ª—é—á –ê–ª—ñ—Å–∏ (e, n) = ({alice_public.e}, {alice_public.n})")
    print(f"   –í—ñ–¥–∫—Ä–∏—Ç–∏–π –∫–ª—é—á –ë–æ–±–∞ (e_1, n_1) = ({bob_public.e}, {bob_public.n})")

    print("\n2. –ê–ª—ñ—Å–∞ —Ñ–æ—Ä–º—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")

    # 1: —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –∫–ª—é—á–∞
    k1 = mod_pow(secret_key, bob_public.e, bob_public.n)
    print("\n   a) –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –∫–ª—é—á–∞ k –≤—ñ–¥–∫—Ä–∏—Ç–∏–º –∫–ª—é—á–µ–º –ë–æ–±–∞:")
    print(f"      k_1 = k^(e_1) mod n_1")
    print(f"      k_1 = {secret_key}^{bob_public.e} mod {bob_public.n}")
    print(f"      k_1 = {k1}")

    # 2: —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å—É
    signature = mod_pow(secret_key, alice_private.d, alice_private.n)
    print("\n   –±) –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –ø—ñ–¥–ø–∏—Å—É —Å–≤–æ—ó–º –∑–∞–∫—Ä–∏—Ç–∏–º –∫–ª—é—á–µ–º:")
    print(f"      S = k^d mod n")
    print(f"      S = {secret_key}^{alice_private.d} mod {alice_private.n}")
    print(f"      S = {signature}")

    # 3: —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å—É
    s1 = mod_pow(signature, bob_public.e, bob_public.n)
    print("\n   –≤) –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å—É –≤—ñ–¥–∫—Ä–∏—Ç–∏–º –∫–ª—é—á–µ–º –ë–æ–±–∞:")
    print(f"      S_1 = S^(e_1) mod n_1")
    print(f"      S_1 = {signature}^{bob_public.e} mod {bob_public.n}")
    print(f"      S_1 = {s1}")

    print("\n3. –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–∏—Ö:")
    print(f"   –ê–ª—ñ—Å–∞ –Ω–∞–¥—Å–∏–ª–∞—î –ë–æ–±—É –ø–∞—Ä—É —á–∏—Å–µ–ª (k_1, S_1) = ({k1}, {s1})")

    print("\n4. –ë–æ–± –≤–∏–∫–æ–Ω—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö:")

    # 4: —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –∫–ª—é—á–∞
    received_k = mod_pow(k1, bob_private.d, bob_private.n)
    print("\n   a) –†–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è k_1 —Å–≤–æ—ó–º –∑–∞–∫—Ä–∏—Ç–∏–º –∫–ª—é—á–µ–º:")
    print(f"      k = k_1^(d_1) mod n_1")
    print(f"      k = {k1}^{bob_private.d} mod {bob_private.n}")
    print(f"      k = {received_k}")

    # 5: —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å—É
    received_signature = mod_pow(s1, bob_private.d, bob_private.n)
    print("\n   –±) –†–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è S_1 —Å–≤–æ—ó–º –∑–∞–∫—Ä–∏—Ç–∏–º –∫–ª—é—á–µ–º:")
    print(f"      S = S_1^(d_1) mod n_1")
    print(f"      S = {s1}^{bob_private.d} mod {bob_private.n}")
    print(f"      S = {received_signature}")

    # 6: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É
    verified_k = mod_pow(received_signature, alice_public.e, alice_public.n)
    print("\n   –≤) –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É –≤—ñ–¥–∫—Ä–∏—Ç–∏–º –∫–ª—é—á–µ–º –ê–ª—ñ—Å–∏:")
    print(f"      k ?= S^e mod n")
    print(f"      k ?= {received_signature}^{alice_public.e} mod {alice_public.n}")
    print(f"      {verified_k} ?= {received_k}")

    # —Ñ—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
    signature_valid = (verified_k == received_k == secret_key)
    print("\n5. –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:")
    print(f"   –û—Ç—Ä–∏–º–∞–Ω–∏–π –∫–ª—é—á —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–º: {received_k == secret_key}")
    print(f"   –ü—ñ–¥–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î —Å–ø—Ä–∞–≤–∂–Ω—ñ—Å—Ç—å –∫–ª—é—á–∞: {verified_k == received_k}")
    print(f"   –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'–ü—Ä–æ—Ç–æ–∫–æ–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ' if signature_valid else '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª—É'}")

def main():
    print("\n–î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ö–†–ò–ü–¢–û–°–ò–°–¢–ï–ú–ò RSA\n")
    print("–¶–µ–π —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î —Ä–æ–±–æ—Ç—É RSA –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥–∞—Ö")

    # –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª—é—á—ñ–≤
    alice_keys, bob_keys = demonstrate_key_generation(512, 512)

    # –ø—Ä–∏–∫–ª–∞–¥ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    demonstrate_encryption(alice_keys, bob_keys)

    # –ø—Ä–∏–∫–ª–∞–¥ –ø—ñ–¥–ø–∏—Å—É
    demonstrate_signature(alice_keys, bob_keys)

    # –ø—Ä–∏–∫–ª–∞–¥ –ø—Ä–æ—Ç–æ–∫–æ–ª—É –æ–±–º—ñ–Ω—É –∫–ª—é—á–∞–º–∏
    demonstrate_key_exchange(alice_keys, bob_keys)

    print("\n–î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê")

if __name__ == "__main__":
    main()
